//SunSet 2 
LINK : https://leetcode.com/problems/subsets-ii/
//Brute Force
class Solution {
    private void subSet(int index, int[] nums,Set<List<Integer>> res, List<Integer> ds){
        if(index ==  nums.length){
            res.add(new ArrayList<>(ds));       
            return;
        }
        
        //pick
        ds.add(nums[index]);
        subSet(index+1,nums,res,ds);
        ds.remove(ds.size()-1);
        //not pick
        
        subSet(index+1, nums,res,ds);
    }
    
    
    
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Set<List<Integer>> res = new HashSet<>();
        Arrays.sort(nums);
        
        subSet(0,nums,res, new ArrayList<>());
        
        List<List<Integer>> ans = new ArrayList<>();
         for(List a:res)
        {
            ans.add(a);
        }
        return ans;        
    }
}


// optimal using comparator

class Solution {
    private void subSet(int index, int[] nums,List<List<Integer>> res, List<Integer> ds){
            
        res.add(new ArrayList<>(ds));
        
        
        for(int i=index;i<nums.length;i++){
            if(i != index && nums[i] == nums[i-1]) continue;
            
            ds.add(nums[i]);
            subSet(i+1,nums,res,ds);
            ds.remove(ds.size()-1);
        }
    }
    
    
    
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        
        subSet(0,nums,res, new ArrayList<>());
        
        return res;
               
    }
}
